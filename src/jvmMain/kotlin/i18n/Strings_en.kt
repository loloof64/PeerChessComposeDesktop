package i18n

val enStrings = Strings(
    validate = "OK",
    cancel = "Cancel",
    newGame = "New game",
    homePageTitle = "Home",
    gamePageTitle = "Game page",
    optionsPageTitle = "Preferences page",
    gotoGamePage = "Go to game page",
    editPositionPageTitle = "Edit start position",
    goBack = "Go back",
    chessPiece = "Chess piece",
    playDirectly = "Play directly",
    editStartPosition = "From custom start position",
    swapBoardOrientation = "Swap board orientation",
    draggedPiece = "Dragged piece",
    wrongFEN = "Illegal position (check all fields).",
    close = "Close",
    queenPromotion = "Queen promotion",
    rookPromotion = "Rook, promotion",
    bishopPromotion = "Bishop promotion",
    knightPromotion = "Knight promotion",
    whiteWonGame = "White won by checkmate.",
    blackWonGame = "Black won by checkmate.",
    drawByStalemate = "Draw by stalemate.",
    drawByThreeFoldRepetition = "Draw by three-fold repetition",
    drawByInsufficientMaterial = "Draw by insufficient material",
    drawByFiftyMovesRule = "Draw by the 50 moves rule",
    goBackHistory = "Previous move",
    goForwardHistory = "Next move",
    goStartHistory = "First position",
    goEndHistory = "Last move",
    stopGame = "Stop game",
    purposeStopGameTitle = "Stop current game ?",
    purposeStopGameMessage = "Do you want to stop current game ?",
    gameAborted = "Game aborted.",
    preferences = "Preferences",
    enginePath = "Chess UCI engine",
    selectEnginePathDialogTitle = "Select the chess UCI engine",
    chooseUciEngine = "Choose chess engine",
    notChessUCIEngineError = "The selected engine is not a runnable chess UCI engine.",
    clearEnginePath = "Clear",
    savedPreferences = "Saved preferences.",
    save = "Save",
    noEngineDefinedWarning = "Don't forget to define a chess engine in the preferences page.",
    engineThinkingTime = "Thinking time",
    computerSidesOptions = "Computer plays",
    computerPlaysWhite = "White",
    computerPlaysBlack = "Black",
    showComputerScoreEvaluation = "Show score",
    emptyCell = "Empty piece",
    whitePawn = "White pawn",
    whiteKnight = "White knight",
    whiteBishop = "White bishop",
    whiteRook = "White rook",
    whiteQueen = "White queen",
    whiteKing = "White king",
    blackPawn = "Black pawn",
    blackKnight = "Black knight",
    blackBishop = "Black bishop",
    blackRook = "Black rook",
    blackQueen = "Black queen",
    blackKing = "Black king",
    selectedPiece = "Selected piece",
    selectEraseCell = "For clearing cell",
    whiteOO = "White O-O",
    whiteOOO = "White O-O-O",
    blackOO = "Black O-O",
    blackOOO = "Black O-O-O",
    enPassantFile = "En passant file",
    select = "Select",
    drawHalfMovesCount = "Half moves counter",
    goUp = "Go up",
    goDown = "Go down",
    moveNumber = "Move number",
    playerTurn = "Turn",
    whiteTurn = "White",
    blackTurn = "Black",
    setDefaultPosition = "Default",
    eraseBoard = "Erase",
    copyFen = "Copy FEN",
    pasteFen = "Paste FEN",
    playFromPgnFile = "Play from PGN file",
    loadPgnPageTitle = "Load game from a PGN file",
    pgnFileType = "PGN file (*pgn)",
    errorImportingSomePgnGames = "Error while importing some games.",
    gotoFirstGame = "First game",
    gotoPreviousGame = "Previous game",
    gotoNextGame = "Next game",
    gotoLastGame = "Last game",
    unknownPlayer = "(Unknown)",
    gamesCount = "games",
    saveGameInPgn = "Save game in PGN file",
    selectSavePgnPathDialogTitle = "Select save PGN file",
    failedSavingPgnFile = "Failed saving PGN file.",
    pgnExported = "Exported game as PGN.",
    confirmExitGameTitle = "Quit game ?",
    confirmExitGameMessage = "Do you want to quit current game ?",
    confirmStartNewGameTitle = "Start new game ?",
    confirmStartNewGameMessage = "Do you want to start a new game ?",
    timedGame = "Timed game",
    allocatedTime = "Allocated time",
    whiteWonOnTime = "White has won on time.",
    blackWonOnTime = "Black has won on time.",
    drawOnTimeByInsufficientMaterial = "Draw by insufficient material though there's a timeout.",
    timeIncrement = "Increment (s)",
    differentTimeForBlack = "Different time for black",
    wrongFieldsCountFen = "The start position FEN has a wrong fields count.",
    oppositeKingInCheckFen = "The start position FEN has opposite king in check.",
    wrongKingsCountFen = "The start position FEN has not the right count for kings.",
    eraseCell = "Erase cell"
)